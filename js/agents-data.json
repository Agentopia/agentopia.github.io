[
  {
    "id": 1,
    "name": "Data Analyzer Bot",
    "emoji": "ðŸ¤–",
    "version": "0.1.0",
    "author": "Agentopia Core Team",
    "category": "Analytics",
    "type": "regular",
    "scale": "single",
    "description": "Upload tabular data (CSV/Excel) for automated exploratory data analysis. Generates a local report with profiling, visualizations, and insights.",
    "configFields": [],
    "features": [
      "Supports CSV and Excel file inputs.",
      "Automated data profiling (dimensions, data types, missing values).",
      "Descriptive statistics for numerical and categorical columns.",
      "Generation of key visualizations (histograms, bar charts, correlation heatmap) saved as image files.",
      "LLM-generated natural language summary of data and insights.",
      "Generates a consolidated HTML report viewable in any web browser.",
      "All data processing and report generation occurs locally for privacy."
    ],
    "tags": [
      "eda",
      "analytics",
      "reporting",
      "data-visualization",
      "statistics",
      "csv",
      "excel",
      "llm",
      "data-profiling",
      "html-report"
    ],
    "demoUrl": "#",
    "sourceUrl": "#",
    "rating": 5,
    "reviews": 0,
    "long_description": "### Overview\nThe Data Analyzer Bot helps you get a quick understanding of your tabular datasets (CSV or Excel files). Upload your data, and the bot will perform an automated Exploratory Data Analysis (EDA), saving all results locally. The output includes:\n\n*   **Data Profile:** Key statistics like row/column counts, data types, missing value analysis, descriptive statistics for numerical columns (mean, median, stddev, min/max), and frequency counts for categorical columns.\n*   **Automated Visualizations:** Common charts such as histograms for numerical distributions, bar charts for categorical frequencies, and a correlation heatmap for numerical features. These are saved as image files.\n*   **LLM-Powered Summary:** A natural language summary of the dataset's characteristics and 2-3 potentially interesting observations or anomalies, generated by an LLM.\n*   **Consolidated HTML Report:** An HTML file (`report.html`) is generated in your specified output directory, which you can open in any web browser to view all analyses and visualizations in one place.\n\nThis bot is designed for local execution to ensure your data remains private. It's perfect for data analysts needing a quick first look, business users wanting to understand data without coding, or anyone needing a rapid, standardized report on a dataset.\n\n### How it Works\n1.  The user provides a path to a local CSV or Excel file and an output directory.\n2.  The bot uses libraries like Pandas to load and analyze the data programmatically.\n3.  It generates statistical summaries and visualizations (e.g., using Matplotlib/Seaborn), saving charts as image files.\n4.  This structured information (statistics, chart data/descriptions) is then passed to an LLM (e.g., via OpenAI API) to generate human-readable summaries and insights, saved as text.\n5.  All results, including the summary, chart images, and a main `report.html`, are saved to the user's specified local output directory.",
    "entry_point": "main.py",
    "deployment_status": "development",
    "use_cases": [
      "Get a quick overview and initial understanding of a new dataset.",
      "Automate the initial steps of Exploratory Data Analysis (EDA).",
      "Identify potential data quality issues (e.g., missing values, outliers) early.",
      "Generate a local, shareable HTML report with key statistics and visualizations.",
      "Prepare for more in-depth analysis or machine learning model training by understanding data characteristics."
    ],
    "requirements": ["pandas", "numpy", "matplotlib", "seaborn", "openpyxl", "python-dotenv", "openai", "jinja2"],
    "roadmap_features": [
      "Interactive chart customization within the HTML report (using JS libraries).",
      "Natural language querying of the dataset (CLI or simple web interface).",
      "Advanced statistical tests (e.g., t-tests, ANOVA) included in the report.",
      "Data cleaning suggestions and automated application options.",
      "Support for more data formats (e.g., Parquet, SQL databases).",
      "User-configurable analysis parameters via a config file or CLI arguments.",
      "Option to run as a local web service for a more interactive experience."
    ],
    "llm_dependency": {
      "type": "openai",
      "apiKeyEnvVar": "OPENAI_API_KEY",
      "apiEndpointEnvVar": "",
      "modelRecommendation": "gpt-4o-mini (for summaries and insights)",
      "notes": "An OpenAI API key is required for the LLM-powered summary and insight generation features. Ensure the `OPENAI_API_KEY` environment variable is set. The agent uses this key to make calls to the OpenAI API. Standard OpenAI API usage charges will apply."
    },
    "privacy_considerations": "This agent is designed for local execution via Docker or direct Python scripting. When run locally:\n\n*   **Data Stays Local:** Your data files (CSV, Excel) are processed on your machine and are not uploaded to any external server by default.\n*   **LLM Interaction:** If LLM features are enabled (e.g., for summaries), only the necessary aggregated statistics or contextual information (not the raw dataset itself, unless explicitly designed to send snippets for analysis which would be documented) are sent to the LLM provider (e.g., OpenAI). You are responsible for understanding the privacy policy of the chosen LLM provider.\n*   **API Keys:** Your API keys (e.g., OpenAI API key) are managed by you as environment variables and are used directly from the local execution environment to communicate with the LLM provider.\n*   **Generated Reports are Local:** All generated reports, charts, and summaries are saved to your specified local output directory.\n\nAlways review the agent's specific implementation if you have concerns about data handling beyond this general guidance.",
    "docker_info": null,
    "setup_instructions": "### Prerequisites:\n*   Python 3.8+ installed.\n*   Docker installed (for containerized execution).\n*   An OpenAI API key if using the LLM-powered summary feature.\n\n### Option 1: Running with Docker (Recommended for ease of use)\n1.  Ensure Docker is running.\n2.  Pull the Docker image (see `docker_pull_instructions`).\n3.  Run the Docker container (see `docker_run_instructions`), making sure to mount your data directory for input and output, and provide necessary environment variables.\n4.  After execution, find the generated `report.html` and other files in your specified output directory on your local machine and open `report.html` in a web browser.\n\n### Option 2: Running Locally with Python\n1.  Clone the agent's source code repository (if applicable, or download the agent files).\n2.  Navigate to the agent's root directory.\n3.  Create a Python virtual environment: `python -m venv .venv`\n4.  Activate the virtual environment: \n    *   Windows: `.venv\\Scripts\\activate`\n    *   macOS/Linux: `source .venv/bin/activate`\n5.  Install dependencies: `pip install -r requirements.txt`\n6.  Set required environment variables (e.g., `OPENAI_API_KEY`).\n7.  Run the agent, specifying your data file and desired output directory: \n    `python main.py --data_file /path/to/your/datafile.csv --output_dir ./my_eda_results` (example)\n8.  After execution, find the generated `report.html` and other files in `./my_eda_results` (or your specified path) and open `report.html` in a web browser."
  },
  {
    "id": 1,
    "name": "Task Assistant",
    "category": "Productivity",
    "type": "regular",
    "scale": "single",
    "description": "A personal assistant that helps you manage tasks, schedule meetings, and stay organized.",
    "rating": 4.5,
    "reviews": 128,
    "features": ["Task Management", "Schedule Optimization", "Priority Analysis"],
    "tags": ["productivity", "organization", "time-management"]
  },
  {
    "id": 2,
    "name": "Workflow Automator",
    "category": "Automation",
    "type": "autonomous",
    "scale": "single",
    "description": "An autonomous agent that learns your workflows and automates repetitive tasks.",
    "rating": 4.8,
    "reviews": 95,
    "features": ["Process Automation", "Workflow Optimization", "Integration Support"],
    "tags": ["automation", "workflow", "integration"]
  },
  {
    "id": 3,
    "name": "Data Insights Team",
    "category": "Analytics",
    "type": "regular",
    "scale": "multiple",
    "description": "A team of specialized agents working together to analyze and visualize your data.",
    "rating": 4.6,
    "reviews": 156,
    "features": ["Data Analysis", "Predictive Analytics", "Visual Reports"],
    "tags": ["analytics", "data", "insights"]
  },
  {
    "id": 4,
    "name": "DevOps Squad",
    "category": "Automation",
    "type": "autonomous",
    "scale": "multiple",
    "description": "A self-organizing team of agents that manage your development and deployment pipeline.",
    "rating": 4.7,
    "reviews": 83,
    "features": ["Code Generation", "Code Review", "Optimization"],
    "tags": ["automation", "coding", "development"]
  },
  {
    "id": 5,
    "name": "MarketMind Analytics",
    "category": "Analytics",
    "type": "regular",
    "scale": "single",
    "description": "Analyze market trends and consumer behavior with this powerful analytics agent.",
    "rating": 4.4,
    "reviews": 203,
    "features": ["Market Analysis", "Trend Prediction", "Consumer Insights"],
    "tags": ["analytics", "market-research", "trends"]
  },
  {
    "id": 6,
    "name": "FocusForge",
    "category": "Productivity",
    "type": "regular",
    "scale": "single",
    "description": "Enhance your productivity with AI-powered focus sessions and smart break scheduling.",
    "rating": 4.3,
    "reviews": 167,
    "features": ["Focus Timer", "Break Scheduler", "Progress Tracking"],
    "tags": ["productivity", "focus", "time-management"]
  }
]
